package voxels

import (
	"fmt"
	"reflect"
	"testing"
)

func TestConvexHull(t *testing.T) {
	tests := []struct {
		path    Path
		reverse bool
		want    Path
	}{
		{}, // no outline
		{
			path: Path{
				"00001,00002",
				"00001,00003",
				"00001,00004",
				"00002,00004",
				"00002,00005",
				"00002,00006",
				"00001,00006",
				"00001,00007",
				"00001,00008",
				"00002,00008",
				"00002,00009",
				"00003,00009",
				"00003,00008",
				"00003,00007",
				"00004,00007",
				"00004,00006",
				"00005,00006",
				"00005,00007",
				"00005,00008",
				"00006,00008",
				"00006,00007",
				"00006,00006",
				"00005,00006",
				"00005,00005",
				"00005,00004",
				"00006,00004",
				"00007,00004",
				"00007,00003",
				"00007,00002",
				"00006,00002",
				"00006,00001",
				"00005,00001",
				"00005,00002",
				"00004,00002",
				"00004,00003",
				"00003,00003",
				"00003,00002",
				"00003,00001",
				"00002,00001",
				"00002,00002",
				"00001,00002",
			},
			want: Path{
				"00001,00002",
				"00001,00008",
				"00002,00009",
				"00003,00009",
				"00006,00008",
				"00007,00004",
				"00007,00002",
				"00006,00001",
				"00002,00001",
				"00001,00002",
			},
		},
		{
			path: Path{
				"00001,00010",
				"00001,00011",
				"00001,00012",
				"00002,00012",
				"00002,00013",
				"00002,00014",
				"00001,00014",
				"00001,00015",
				"00001,00016",
				"00002,00016",
				"00002,00015",
				"00003,00015",
				"00003,00014",
				"00004,00014",
				"00004,00015",
				"00004,00016",
				"00005,00016",
				"00005,00015",
				"00005,00014",
				"00006,00014",
				"00006,00015",
				"00006,00016",
				"00007,00016",
				"00008,00016",
				"00008,00015",
				"00008,00014",
				"00008,00013",
				"00008,00012",
				"00007,00012",
				"00007,00013",
				"00007,00014",
				"00006,00014",
				"00006,00013",
				"00006,00012",
				"00006,00011",
				"00007,00011",
				"00007,00010",
				"00008,00010",
				"00008,00009",
				"00008,00008",
				"00008,00007",
				"00008,00006",
				"00007,00006",
				"00007,00007",
				"00007,00008",
				"00007,00009",
				"00006,00009",
				"00006,00010",
				"00006,00011",
				"00005,00011",
				"00005,00010",
				"00005,00009",
				"00004,00009",
				"00004,00010",
				"00003,00010",
				"00003,00011",
				"00002,00011",
				"00002,00010",
				"00001,00010",
			},
			want: Path{
				"00001,00010",
				"00001,00016",
				"00008,00016",
				"00008,00006",
				"00007,00006",
				"00001,00010",
			},
		},
		{
			reverse: true,
			path: Path{
				"00004,00012",
				"00005,00012",
				"00005,00013",
				"00005,00014",
				"00004,00014",
				"00004,00013",
				"00004,00012",
			},
			want: Path{
				"00004,00012",
				"00005,00012",
				"00005,00014",
				"00004,00014",
				"00004,00012",
			},
		},
		{
			path: Path{
				"00000,00001",
				"00000,00002",
				"00000,00003",
				"00000,00004",
				"00001,00004",
				"00001,00005",
				"00002,00005",
				"00002,00004",
				"00003,00004",
				"00003,00003",
				"00003,00002",
				"00003,00001",
				"00002,00001",
				"00002,00000",
				"00001,00000",
				"00001,00001",
				"00000,00001",
			},
			want: Path{
				"00000,00001",
				"00000,00004",
				"00001,00005",
				"00002,00005",
				"00003,00004",
				"00003,00001",
				"00002,00000",
				"00001,00000",
				"00000,00001",
			},
		},
		{
			reverse: true,
			path: Path{
				"00001,00002",
				"00002,00002",
				"00002,00003",
				"00001,00003",
				"00001,00002",
			},
			want: Path{
				"00001,00002",
				"00002,00002",
				"00002,00003",
				"00001,00003",
				"00001,00002",
			},
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("test #%v", i), func(t *testing.T) {
			got := convexHull(tt.path, tt.reverse)

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("convexHull =\n%#v\nwant:\n%#v", got, tt.want)
			}
		})
	}
}
